# theta: upper limit of uniform distribution
#######################
P1 = function(N, size, theta){
result=c()
arr_theta_hat_1 = c()
arr_theta_hat_2 = c()
for (i in 1 : N) {
data = runif(size, min = 0, max = theta)
theta_hat_1 = max(data)
theta_hat_2 = 2 * mean(data)
arr_theta_hat_1[i] = (theta_hat_1 - theta)^2
arr_theta_hat_2[i] = (theta_hat_2 - theta)^2
}
mse1 = mean(arr_theta_hat_1)
mse2 = mean(arr_theta_hat_2)
result = rbind(result, c(mse1, mse2))
colnames(result) = c("MSE_theta_hat_1","MSE_theta_hat_2")
rownames(result) = paste("n=",size, ", theta=", theta)
return (result)
}
# call the function
result = P1(1000, 30, 100)
result
P1_2 = function(N, sizes, thetas){
result=c()
# name of every row in the result
name=c()
for (theta in thetas) {
for (size in sizes) {
arr_theta_hat_1 = c()
arr_theta_hat_2 = c
name = c(name, paste("n=",size, ", theta=", theta))
for (i in 1 : N) {
data = runif(size, min = 0, max = theta)
theta_hat_1 = max(data)
theta_hat_2 = 2 * mean(data)
arr_theta_hat_1[i] = (theta_hat_1 - theta)^2
arr_theta_hat_2[i] = (theta_hat_2 - theta)^2
}
mse1 = mean(arr_theta_hat_1)
mse2 = mean(arr_theta_hat_2)
result = rbind(result, c(mse1, mse2))
}
}
colnames(result) = c("MSE_theta_hat_1","MSE_theta_hat_2")
rownames(result) = name
return (result)
}
# call the function
sizes = c (1, 2, 3, 5, 10, 30)
thetas = c (1, 5, 50, 100)
result = P1_2(1000, sizes, thetas)
result
P1_2 = function(N, sizes, thetas){
result=c()
# name of every row in the result
name=c()
for (theta in thetas) {
for (size in sizes) {
arr_theta_hat_1 = c()
arr_theta_hat_2 = c
#name = c(name, paste("n=",size, ", theta=", theta))
for (i in 1 : N) {
data = runif(size, min = 0, max = theta)
theta_hat_1 = max(data)
theta_hat_2 = 2 * mean(data)
arr_theta_hat_1[i] = (theta_hat_1 - theta)^2
arr_theta_hat_2[i] = (theta_hat_2 - theta)^2
}
mse1 = mean(arr_theta_hat_1)
mse2 = mean(arr_theta_hat_2)
result = rbind(result, c(mse1, mse2))
}
}
colnames(result) = c("MSE_theta_hat_1","MSE_theta_hat_2")
#rownames(result) = name
return (result)
}
# call the function
sizes = c (1, 2, 3, 5, 10, 30)
thetas = c (1, 5, 50, 100)
result = P1_2(1000, sizes, thetas)
result
P1_2 = function(N, sizes, thetas){
result=c()
# name of every row in the result
name=c()
for (theta in thetas) {
for (size in sizes) {
arr_theta_hat_1 = c()
arr_theta_hat_2 = c()
name = c(name, paste("n=",size, ", theta=", theta))
for (i in 1 : N) {
data = runif(size, min = 0, max = theta)
theta_hat_1 = max(data)
theta_hat_2 = 2 * mean(data)
arr_theta_hat_1[i] = (theta_hat_1 - theta)^2
arr_theta_hat_2[i] = (theta_hat_2 - theta)^2
}
mse1 = mean(arr_theta_hat_1)
mse2 = mean(arr_theta_hat_2)
result = rbind(result, c(mse1, mse2))
}
}
colnames(result) = c("MSE_theta_hat_1","MSE_theta_hat_2")
rownames(result) = name
return (result)
}
# call the function
sizes = c (1, 2, 3, 5, 10, 30)
thetas = c (1, 5, 50, 100)
result = P1_2(1000, sizes, thetas)
result
P1_2 = function(N, sizes, thetas){
result=c()
# name of every row in the result
name=c()
for (size in sizes) {
for (theta in thetas) {
arr_theta_hat_1 = c()
arr_theta_hat_2 = c()
name = c(name, paste("n=",size, ", theta=", theta))
for (i in 1 : N) {
data = runif(size, min = 0, max = theta)
theta_hat_1 = max(data)
theta_hat_2 = 2 * mean(data)
arr_theta_hat_1[i] = (theta_hat_1 - theta)^2
arr_theta_hat_2[i] = (theta_hat_2 - theta)^2
}
mse1 = mean(arr_theta_hat_1)
mse2 = mean(arr_theta_hat_2)
result = rbind(result, c(mse1, mse2))
}
}
colnames(result) = c("MSE_theta_hat_1","MSE_theta_hat_2")
rownames(result) = name
return (result)
}
# call the function
sizes = c (1, 2, 3, 5, 10, 30)
thetas = c (1, 5, 50, 100)
result = P1_2(1000, sizes, thetas)
result
result
result[1]
result[2]
result[24]
lenth(result)
length(result)
result[1:24]
result[25:48]
thetas
plot(thetas, result[45:48])
plot(thetas, result[21:24])
?plot
plot(thetas, result[21:24], typle='l')
plot(thetas, result[21:24], type='l')
plot(thetas, result[21:24], typle='l', color='red')
warnings()
plot(thetas, result[21:24], type='l', color='red')
plot(thetas, result[21:24], type='l', col='red')
plot(thetas, result[45:48], type='l', col='blue')
plot(thetas, result[21:24], type='l', col='red')
points(thetas, result[45:48], type='l', col='blue')
plot(thetas, result[45:48], type='l', col='blue')
points(thetas, result[21:24], type='l', col='red')
?points
points(thetas, result[21:24], pch=1, type='l', col='red')
plot(thetas, result[45:48], type='l', col='blue', pch=1)
?plo
?plot
par(pch=1)
plot(thetas, result[45:48], type='l', col='blue')
result
par(pchisq(1))
par(pch=1)
plot(thetas, result[45:48], type='l', col='blue')
y1 = result[21:24]
y2 = result[45:48]
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', col = 'blue', ylim = c(miny, maxy))
points(thetas, y2, type = 'l')
legend("topright", c("MLE", "Method of Moment"), pch = c(1,2))
plot(thetas, y1, type = 'l', col = 'blue', ylim = c(miny, maxy))
points(thetas, y2, type = 'l', col = 'red')
legend("topright", c("MLE", "Method of Moment"), pch = c(1,2))
?legend
plot(thetas, y1, type = 'p', col = 'blue', ylim = c(miny, maxy))
points(thetas, y2, type = 'p', col = 'red')
legend("topright", c("MLE", "Method of Moment"), pch = c(1,2))
legend("topleft", c("MLE", "Method of Moment"), pch = c(1,2))
plot(thetas, y1, type = 'p', col = 'blue', ylim = c(miny, maxy))
points(thetas, y2, type = 'p', col = 'red')
legend("topleft", c("MLE", "Method of Moment"), pch = c(1,2))
plot(thetas, y1, type = 'l', lty = 2, col = 'blue', ylim = c(miny, maxy))
lines(thetas, y2, lty = 1, col = 'red')
legend("topleft", c("MLE", "Method of Moment"), lty = c(2,1))
plot(thetas, y1, type = 'l', lty = 2, col = 'blue', ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE')
lines(thetas, y2, lty = 1, col = 'red')
legend("topleft", c("MLE", "Method of Moment"), lty = c(2,1))
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE')
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
result
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = "name")
f_name = "n = 30"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
result = P1_2(1000, sizes, thetas)
# start to plot
par(mfrow=c(6,2))
y1 = result[1:4]
y2 = result[25:28]
f_name = "n = 1"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[5:8]
y2 = result[29:32]
f_name = "n = 2"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[9:12]
y2 = result[33:36]
f_name = "n = 3"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[13:16]
y2 = result[37:40]
f_name = "n = 5"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[17:20]
y2 = result[41:44]
f_name = "n = 10"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[21:24]
y2 = result[45:48]
f_name = "n = 30"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
result
# start to plot
par(mfrow=c(2,2))
y1 = result[1:4]
y2 = result[25:28]
f_name = "n = 1"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[5:8]
y2 = result[29:32]
f_name = "n = 2"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[9:12]
y2 = result[33:36]
f_name = "n = 3"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[13:16]
y2 = result[37:40]
f_name = "n = 5"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[17:20]
y2 = result[41:44]
f_name = "n = 10"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[21:24]
y2 = result[45:48]
f_name = "n = 30"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y2 = result[25:28]
# start to plot
par(mfrow=c(3,2))
y1 = result[1:4]
y2 = result[25:28]
f_name = "n = 1"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[5:8]
y2 = result[29:32]
f_name = "n = 2"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[9:12]
y2 = result[33:36]
f_name = "n = 3"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[13:16]
y2 = result[37:40]
f_name = "n = 5"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[17:20]
y2 = result[41:44]
f_name = "n = 10"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
y1 = result[21:24]
y2 = result[45:48]
f_name = "n = 30"
y = c(y1, y2)
miny = min(y)
maxy = max(y)
plot(thetas, y1, type = 'l', lty = 1, ylim = c(miny, maxy), xlab = 'Theta', ylab = 'MSE', main = f_name)
lines(thetas, y2, lty = 2)
legend("topleft", c("MLE", "Method of Moment"), lty = c(1,2))
log(10)
ln(10)
log(exp)
log(e)
?log
log(exp(1))
1/(log(4.79*10.89*6.54*22.15))
4/(log(4.79*10.89*6.54*22.15))
log(4.79*10.89*6.54*22.15)
4/8.93015
?optim
c(0,100)
data = c(4.79, 10.89, 6.54, 22.15)
log(data)
dgama
?dgamma
data = c(4.79, 10.89, 6.54, 22.15)
loglik.fn = function(theta, n, dat){
n*log(theta)-(theta+1)*sum(dat)
}
loglik.fn = function(theta, dat){
length(dat)*log(theta)-(theta+1)*sum(dat)
}
?optim
?dgamma
?optim
?nrow
nrow(data)
data = c(4.79, 10.89, 6.54, 22.15)
neg.loglik.fn = function(theta, dat){
result = length(dat)*log(theta)-(theta+1)*sum(dat)
return(-result)
}
optim(1, neg.loglik.fn, dat=data, method="L-BFGS-B", lower = 0, upper = Inf, hessian = true)
optim(1, fn=neg.loglik.fn, dat=data, method="L-BFGS-B", lower = 0, upper = Inf, hessian = true)
time = c(4.79, 10.89, 6.54, 22.15)
neg.loglik.fn = function(theta, dat){
result = length(dat)*log(theta)-(theta+1)*sum(dat)
return(-result)
}
ml.est=optim(par=c(1), fn=neg.loglik.fn, method="L-BFGS-B", lower = 0,
upper = Inf, hessian = true, dat=time)
?optim
ml.est=optim(par=c(1), fn=neg.loglik.fn, method="BFGS", lower = 0,
upper = Inf, hessian = true, dat=time)
ml.est=optim(par=c(1), fn=neg.loglik.fn, method="L-BFGS-B", lower = 0,
upper = Inf, hessian = true, dat=time)
ml.est=optim(theta=0, fn=neg.loglik.fn, dat=time)
ml.est=optim(theta=0, fn=neg.loglik.fn, dat=time)
ml.est=optim(par=c(0, c(time)), fn=neg.loglik.fn, hessian = true)
ml.est=optim(par=c(0, c(time)), fn=neg.loglik.fn, hessian = true, dat=time)
ml.est=optim(par=c(0), fn=neg.loglik.fn, hessian = true, dat=time)
ml.est=optim(par=c(0), fn=neg.loglik.fn, method = "Brent", hessian = true, dat=time)
ml.est=optim(par=c(0), fn=neg.loglik.fn, method = "Brent", lower = 0, upper = Inf, hessian = true, dat=time)
ml.est=optim(par=c(0), fn=neg.loglik.fn, method = "Brent", lower = 0, upper = 100, hessian = true, dat=time)
ml.est=optim(par=c(0), fn=neg.loglik.fn, method = "Brent", lower = 0, upper = 100, dat=time)
ml.est
ml.est=optim(par=c(1), fn=neg.loglik.fn, method = "Brent", lower = 0, upper = 100, dat=time)
ml.est
time = c(4.79, 10.89, 6.54, 22.15)
neg.loglik.fn = function(theta, dat){
result = sum(length(dat)*log(theta)-(theta+1)*sum(dat))
return(-result)
}
ml.est=optim(par=c(1), fn=neg.loglik.fn, method = "Brent", lower = 0, upper = 100, dat=time)
ml.est
ml.est=optim(par=c(1), fn=neg.loglik.fn, method = "Brent", lower = 0, upper = 10, dat=time)
ml.est
neg.loglik.fn(0.090151, time)
neg.loglik.fn(0.4479208, time)
ml.est=optim(par=c(1), fn=neg.loglik.fn, method = "Brent", lower = 0.001, upper = 10, dat=time)
ml.est
neg.loglik.fn = function(theta, dat){
result = -length(dat)*log(theta)+(theta+1)*sum(dat)
return(result)
}
ml.est=optim(par=c(1), fn=neg.loglik.fn, method = "Brent", lower = 0.001, upper = 10, dat=time)
ml.est
neg.loglik.fn = function(theta, dat){
result = -length(dat)*log(theta)+(theta+1)*sum(log(dat))
return(result)
}
ml.est=optim(par=c(1), fn=neg.loglik.fn, method = "Brent", lower = 0, upper = 100, dat=time)
ml.est
neg.loglik.fn = function(theta, dat){
result = length(dat)*log(theta)-(theta+1)*sum(log(dat))
return(-result)
}
ml.est=optim(par=c(1), fn=neg.loglik.fn, method = "Brent", lower = 0, upper = 100, dat=time)
ml.est
ml.est=optim(par=c(1), fn=neg.loglik.fn, method = "Brent", lower = 0, upper = 100, hessian = true , dat=time)
ml.est=optim(par=c(1), fn=neg.loglik.fn, method = "Brent", lower = 0, upper = 100, hessian = TRUE , dat=time)
ml.est
sqrt(diag(solve(ml.est$hessian)))
qnorm(0.025)
qnorm(0.075)
qnorm(0.975)
0.4479199+1.959964*0.2239593
0.4479199-1.959964*0.2239593
qnorm(0.005)
qnorm(0.995)
sqrt
sqrt(4)
sqrt(60)
qnorm(0.995)*3
(qnorm(0.995)*3)^2
sd(c(1,2,3,4))
1.5*1.5*2+0.5*0.5*2
5/3
a = c(1,2,3,4)
mean(a)
var()a
var(a)
5/4
Math.sqrt(1.666667)
sqrt(1.666667)
dat = c(0.46,0.38,.31,.24,.20,.31,.34,.42,.09,.18,.46,.21)
mean(dat)
var(dat)
sd(dat)
qt(0.975,11)
sqrt(var(dat))
pbinom(2,10,0.25)
pbinom(1,10,0.25)
